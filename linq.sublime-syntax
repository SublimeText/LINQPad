%YAML 1.2
---
name: LINQPad
file_extensions: 
  - linq
scope: source.linqpad # https://www.linqpad.net/
first_line_match: '^<Query\s+Kind\s*=\s*"[^"]+"\s*/?>$'
contexts:
  close_query_tag:
    - match: (</)(Query)\s*(>)
      captures:
        0: text.xml meta.tag.xml
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: punctuation.definition.tag.end.xml
      pop: true
  main:
    - match: '^(<)(Query)\s+(Kind)\s*(=)\s*(")'
      captures:
        0: text.xml meta.tag.xml
        1: punctuation.definition.tag.begin.xml
        2: entity.name.tag.localname.xml
        3: entity.other.attribute-name.localname.xml
        4: keyword.operator.equals.xml
        5: string.quoted.double.xml punctuation.definition.string.begin.xml
      push: querykind
  querykind:
    - match: '(Expression|Statements|Program)(")'
      captures:
        0: text.xml meta.tag.xml string.quoted.double.xml
        2: string.quoted.double.xml punctuation.definition.string.end.xml
      set: [cs, xml]
    - match: '(E?SQL)(")'
      captures:
        0: text.xml meta.tag.xml string.quoted.double.xml
        2: string.quoted.double.xml punctuation.definition.string.end.xml
      set: [sql, xml]
    - match: '(VB[^"]+)(")'
      captures:
        0: text.xml meta.tag.xml string.quoted.double.xml
        2: string.quoted.double.xml punctuation.definition.string.end.xml
      set: [vb, xml]
    - match: '(FSharp[^"]+)(")'
      captures:
        0: text.xml meta.tag.xml string.quoted.double.xml
        2: string.quoted.double.xml punctuation.definition.string.end.xml
      set: [fsharp, xml]
    - match: '([^"]*)(")'
      captures:
        0: text.xml meta.tag.xml string.quoted.double.xml
        1: invalid.illegal.unrecognized.querykind.linq
        2: string.quoted.double.xml punctuation.definition.string.end.xml
      push: [unknown_syntax, xml]
  unknown_syntax:
    - match: '.'
      scope: invalid.illegal.unknown_syntax.linq
  xml:
    - match: '\s*(/>)'
      captures:
        0: text.xml meta.tag.xml
        1: punctuation.definition.tag.end.xml
      pop: true
    - match: '\s*(>)'
      captures:
        0: text.xml meta.tag.xml
        1: punctuation.definition.tag.end.xml
      set: [pop_me, scope:text.xml] # pop_me will ensure that the xml context is popped when the prototype pops the scope:text.xml context
      with_prototype:
        - include: close_query_tag
  pop_me:
    - match: ''
      pop: true
  # these are necessary so that the rest of the xml doesn't get the meta_scope, which is what would happen if we directly set/pushed the desired scope from within the xml attribute value
  cs:
    - match: ''
      set: scope:source.cs
  sql:
    - match: ''
      set: scope:source.sql
  vb:
    - match: ''
      set: scope:source.vbnet # https://packagecontrol.io/packages/VBDotNet
  fsharp:
    - match: ''
      set: scope:source.fsharp # https://packagecontrol.io/packages/F%23
